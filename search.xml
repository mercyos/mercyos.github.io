<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[线程的停止方式]]></title>
      <url>http://yoursite.com/2016/09/23/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%81%9C%E6%AD%A2/</url>
      <content type="html"><![CDATA[<h1 id="线程的停止"><a href="#线程的停止" class="headerlink" title="线程的停止"></a>线程的停止</h1><hr>
<h2 id="判断线程是否停止"><a href="#判断线程是否停止" class="headerlink" title="判断线程是否停止"></a>判断线程是否停止</h2><p>　　两个用来判断线程停止的方法，分别是<br>　　<code>this.interrupted()</code><br>　　<code>this.isInterrupted()</code><br>这两中方法可以用来判断线程的停止状态。但是两者是有区别的。</p>
<blockquote>
<p>this.inturrupted()：测试当前的线程是否已经中断。<br>this.isInterrupted()：测试对象的线程是否中断.</p>
</blockquote>
<p>　　另外<code>this.inturrupted()</code>具有标志清楚功能，所以连续两次执行的话，第二次总是清除为false。而<code>this.isInterrupted()</code>则不清除状态，仅仅是测试Thread对象所代表的线程是否中断。</p>
<hr>
<h2 id="线程停止的方法"><a href="#线程停止的方法" class="headerlink" title="线程停止的方法"></a>线程停止的方法</h2><h3 id="异常法"><a href="#异常法" class="headerlink" title="异常法"></a>异常法</h3><p>　　首先来看一段具体的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Mythread thread = <span class="keyword">new</span> Mythread();</div><div class="line">		StopThread t = <span class="keyword">new</span> StopThread();</div><div class="line">		thread.start();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">2000</span>);</div><div class="line">			thread.interrupt();</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			System.out.println(<span class="string">"main catch"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"end!!!"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.run();</div><div class="line">		<span class="keyword">try</span>&#123;	</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.interrupted())&#123;</div><div class="line">					System.out.println(<span class="string">"已经是停止状态!我要退出了"</span> );</div><div class="line"><span class="comment">//					break;</span></div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">				&#125;</div><div class="line">				System.out.println(<span class="string">"i = "</span> + i);</div><div class="line">			&#125;</div><div class="line">	<span class="comment">//		System.out.println("我被输出，如果次代码是for而又被运行，说明线程未被停止！！");</span></div><div class="line">			System.out.println(<span class="string">"我在for下面"</span>);</div><div class="line">		&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</div><div class="line">			System.out.println(<span class="string">"进Mythread。java类run方法中的catch了！！"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　通过对线程类的分析，其中的run()方法是在继承Threadrun()方法的基础上重写，首先循环50万次打印“i = XXX”在这期间，一旦被打断，则抛出异常（其中的break是为了做对比的，如果是break则此线程不会停止，而是继续，而如果是抛出异常，则进入异常处理，这代表这这个线程结束），然后异常处理打印“进入MyThread······”表示这个线程结束。所以main()方法中执行thread.interrupted()时，主动抛出异常，进入异常处理，线程结束。<strong>线程的停止就是将线程的运行语句结束，这里抛出异常可以达到目的。而break那个是不行的</strong>　　</p>
<p>###在沉睡中停止<br>　　首先来看一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在线程睡的过程中，进行interrupt,然后接收到异常，停止线程</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopInSleep</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread2 thread = <span class="keyword">new</span> MyThread2();</div><div class="line">		thread.start();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">200</span>);</div><div class="line">			thread.interrupt();</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			System.out.println(<span class="string">"main catch"</span>);</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"end!!!"</span>);</div><div class="line">		System.out.println(thread.isInterrupted());</div><div class="line">		System.out.println(Thread.interrupted());</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.run();</div><div class="line">		System.out.println(<span class="string">"run begin!!"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">200000</span>);</div><div class="line">			System.out.println(<span class="string">"run end!!"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			System.out.println(<span class="string">"在沉睡中被停止！进入catch！"</span> + <span class="keyword">this</span>.isInterrupted());</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　在这段代码中我们可以看到线程类在执行run()方法的过程中sleep了20秒。而在main()方法中线程开始后，主线程睡200ms,thread线程这时候被打断。<strong>sleep方法在被打断的时候会抛出InterruptedException异常</strong>，于是乎，进入了异常处理，代表着这个线程结束。其实和异常发的方法差不多一样，都是进入异常处理来结束。</p>
<hr>
<p>　　<strong>一点思考：</strong><del>这里我在16.17两行上打印了两个信息来确定线程是否停止了</del>，其中Thread代表主线程,主线程总是打印false，所以主线程是肯定没有停止的，而thread线程有时候是true有时候是false，<del>这说明当被打断后进入异常处理的过程中，主线程与处理过程是“并行”的，主线程在到打印thread.isInterrupted()的时候，异常处理可能还没有完全进入。若此时打印false，代表线程还未停止，也有可能进入了异常处理，若此时打印ture,则说明已经进入了异常处理，run()方法结束运行，线程结束了。若让主线程sleep()上1000ms时，此时肯定会打印false，也即说明此方法是有效的。</del> <strong>书上的说法是进入异常后，也即进入catch语句，清除停止状态值，使之变成false。</strong><br><strong>而在主线程中的此线程状态则不好判断，因为线程之间的执行进度与状态不确定：</strong></p>
<blockquote>
<p>调用interrupt()方法仅仅是在当前线程中打了一个停止的标记，并是不真的停止线程。</p>
</blockquote>
<p><strong>interrupt仅仅是传递了请求中断的信息，线程会在下一个方便的时间中断，因而，此时用interrupted()不确定其状态，但是总是会停止的。</strong></p>
<hr>
<h3 id="暴力停止stop"><a href="#暴力停止stop" class="headerlink" title="暴力停止stop()"></a>暴力停止stop()</h3><p>　　这种方法不推荐，已经废弃了。这个方法会抛出java.lang.ThreadDeath异常，但是此异常通常不需要捕捉。</p>
<hr>
<h3 id="使用return来停止线程"><a href="#使用return来停止线程" class="headerlink" title="使用return来停止线程"></a>使用return来停止线程</h3><p>　　首先看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThreadReturn</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread3 thread = <span class="keyword">new</span> MyThread3();</div><div class="line">		thread.start();</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Thread.sleep(<span class="number">2000</span>);</div><div class="line">			thread.interrupt();</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">super</span>.run();</div><div class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>.isInterrupted())&#123;</div><div class="line">				System.out.println(<span class="string">"停止了！"</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"timer = "</span> + System.currentTimeMillis());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>　　<strong>不过还是建议使用抛异常的方法来实现线程的停止，这样能够在catch块中将异常向上抛，使线程的停止事件得到传播。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hello hexo]]></title>
      <url>http://yoursite.com/2016/09/22/test1/</url>
      <content type="html"><![CDATA[<p>This is a test for categories and tags!!</p>
<p>end!!!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/09/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
